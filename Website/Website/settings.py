"""
Django settings for Website project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_0j2yn*(xar5v*&4g2j0(&wq@a7@c*zh^f99+g^&7v(6jjl30^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [ '*' ]


# ADD - these below lines are only for set another address+port for our website
from django.core.management.commands.runserver import Command as runserver        # type: ignore # adding  
# runserver.default_port = '1111'        # <-- Your port                                                                      # adding  
runserver.default_port = '1234'        # <-- Your port                                                                      # adding  
runserver.default_addr = 'localhost'                                                                                                  # adding  



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'corsheaders', # Cross-Origin Resource Sharing (CORS) headers for Django, Otherwise it will not work for google onetap( & react frontend ), so add this in settings.py and urls.py

    # third-party apps
    'ckeditor',
    'ckeditor_uploader',  # Only if using image/file upload feature
    
    # Core Django apps...
    'rest_framework',
    'rest_framework.authtoken',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    
    # all auth - google, facebook, github
    # 'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google', 
    'allauth.socialaccount.providers.github',
    # 'allauth.socialaccount.providers.linkedin',
    'allauth.socialaccount.providers.linkedin_oauth2',  # âœ… Correct
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.instagram',
    'allauth.socialaccount.providers.twitter',

    # apps list
    'UI',
    'API',
    'Security',

    # 'google-auth', 
]

MIDDLEWARE = [
    
    'corsheaders.middleware.CorsMiddleware',  # VERY IMPORTANT -> Add it at the top, so that it can work for google onetap( & react frontend ), so add this in settings.py and urls.py

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    "allauth.account.middleware.AccountMiddleware", 
    
    # custom middleware for refresh jwt tokens access and refresh, 2 options, use any one
    # 'UI.middleware.JWTRefreshMiddleware',  # 1
    # 'UI.middleware.JWTMiddleware',  # 2

]

ROOT_URLCONF = 'Website.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR,"_templates"],    # 'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Website.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
# USE_I18N = True
# USE_TZ = True
TIME_ZONE =  'Asia/Kolkata'     # adding  
USE_I18N = True                          # adding  


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
# STATIC_URL = 'static/'
STATIC_URL = '_static/'     # adding  

# Addituinal Adding, So that static files are accessable, 
STATICFILES_DIRS = [          # adding  
    BASE_DIR,"_static"          # adding  
    # BASE_DIR/"_static"      # adding  
]                                                    # adding  

# Because of uploading media files, follow below!! 
# MEDIA_ROOT =  os.path.join(BASE_DIR, '_uploads') 
MEDIA_ROOT =  BASE_DIR / '_uploads'       # adding  
MEDIA_URL = '/_uploads/'                               # adding  





# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'




# ckeditor  
CKEDITOR_BASEPATH = "/_static/ckeditor/ckeditor/"
CKEDITOR_UPLOAD_PATH = "/_static/ckeditor/ckeditor/"
CKEDITOR_UPLOAD_PATH = "uploads/"
CKEDITOR_IMAGE_BACKEND = "pillow"

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',
        'extraPlugins': ','.join(
            [
                'codesnippet',
            ]),
    },
}

# TO REMOVE WARNINGS 
# import warnings
# warnings.simplefilter('ignore', UserWarning)










# Custom backend
AUTHENTICATION_BACKENDS = [
    'UI.auth_backends.EmailOrUsernameAuthBackend',  # Custom backend
    'django.contrib.auth.backends.ModelBackend',  # Default backend (optional)
]
# all auth - google, facebook, github
AUTHENTICATION_BACKENDS += [
    'django.contrib.auth.backends.ModelBackend', 
    'allauth.account.auth_backends.AuthenticationBackend',
]

# all auth - google, facebook, github
SITE_ID = 2



# Provider specific settings
# SOCIALACCOUNT_PROVIDERS = {
#     'google': {
#             'SCOPE'  : [
#                     'profile', 
#                     'email',
#             ],
#             'AUTH_PARAMS': {
#                     'access_type': 'online',
#             },
#     }
# }
'''
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['openid', 'email', 'profile'],
        'AUTH_PARAMS': {'prompt': 'select_account'},
        'OAUTH_PKCE_ENABLED': True,  # Helps with security
        # 'FETCH_USERINFO': True
    }
}
'''

SOCIALACCOUNT_PROVIDERS = {
          
    # DONE
    'google': {
        'SCOPE': [
            'openid',
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
            'prompt': 'select_account'
        },
        'FIELDS': [
            'email', 'name', 'given_name', 'family_name', 'picture', 'locale', 'id', 'first_name', 'last_name'
            # 'email', 'name', 'given_name', 'family_name', 'picture'
        ],
        'OAUTH_PKCE_ENABLED': True,  # Helps with security
        # 'FETCH_USERINFO': True
        'METHOD': 'oauth2',
    },
    
    # DONE
    'github': {
        'SCOPE': [
            'user',
            'user:email',
        ],
        'AUTH_PARAMS': {
            'allow_signup': 'true'
        }
    },

    'discord': {
        'SCOPE': [
            'identify',
            'email',
        ],
    },
    
    # DONE
    'facebook': {
            'METHOD': 'oauth2',
            'SCOPE': [
                'email',
                'public_profile',
            ],
            'FIELDS': [
                'id',
                'email',
                'name',
                'first_name',
                'last_name',
                'picture',
            ],
            'AUTH_PARAMS': {
                'auth_type': 'reauthenticate'
            },
        },

    'instagram': {
        'SCOPE': [
            'user_profile',
            'user_media',
        ],
        # Note: You must handle Instagram OAuth via Facebook/Meta developer portal.
        # instagram_basic display API is deprecated and complex.
        'AUTH_PARAMS': {
            'auth_type': 'reauthenticate',
        },
    }, 

    # DONE
    'twitter': {
        # 'APP': {
        #     'client_id': 'YOUR_CONSUMER_KEY',
        #     'secret': 'YOUR_CONSUMER_SECRET',
        #     'key': ''
        # },
        'VERIFIED_EMAIL': True,  # <- tells allauth to treat the returned email as verified
        'FIELDS': ['email', 'name', 'screen_name', 'profile_image_url_https'],
        # 'AUTH_PARAMS': {
        #     'include_email': 'true',
        # },
    },
    
    # DONE
    'linkedin_oauth2': {
        'SCOPE': [
            'openid',
            'profile',
            'email',
            # "r_liteprofile",
            # "r_basicprofile",
            # "r_emailaddress",
        ],
        'PROFILE_FIELDS': [
            'id',
            'firstName',
            'lastName',
            'emailAddress',
            # 'profilePicture',
        ],
            
        "scopes_supported": [
            "openid",
            "profile",
            "email"
        ],
        "claims_supported": [
            "iss",
            "aud",
            "iat",
            "exp",
            "sub",
            "name",
            "given_name",
            "family_name",
            "picture",
            "email",
            "email_verified",
            "locale"
        ]
    },

    'linkedin_oauth2': {
        'SCOPE': ['openid', 'profile', 'email'],
        'PROFILE_FIELDS': ['id', 'firstName', 'lastName', 'emailAddress'],
        'AUTH_PARAMS': {
            'response_type': 'code',
        },
    },

}




# ACCOUNT_AUTHENTICATION_METHOD = "username_email"

LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/login/"

ACCOUNT_SIGNUP_REDIRECT_URL = '/security/profile-setup/'  # New user goes here
ACCOUNT_LOGIN_REDIRECT_URL = '/'       # Existing user goes here 
ACCOUNT_LOGOUT_REDIRECT_URL = '/security/login/'          # Logout here 

# listen very clearly, that below three lines are very important ! because of 2nd even coming problems if you want to login with github and anything more !!! 
ACCOUNT_EMAIL_VERIFICATION = 'none' # 'mandatory'
# ACCOUNT_EMAIL_REQUIRED = True   # outdated, show warning,use below
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']
ACCOUNT_UNIQUE_EMAIL = False         # â›” This is very important!



# LOGIN_REDIRECT_URL = "/"
# ACCOUNT_LOGOUT_REDIRECT_URL = "/"
# ACCOUNT_EMAIL_VERIFICATION = "none"  # Set to "optional" or "mandatory" if required
# SOCIALACCOUNT_QUERY_EMAIL = True


#  #django-allauth registraion settings 
# ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS =1
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_EMAIL_VERIFICATION = "mandatory"
# ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
  
# # 1 day 
# ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 86400 


# Optional: Automatically log in users upon GET request
# SOCIALACCOUNT_LOGIN_ON_GET=True
# SECURE_REFERRER_POLICY= "strict-origin-when-cross-origin"
# SECURE_REFERRER_POLICY = "no-referrer-when-downgrade"




ACCOUNT_SIGNUP_REDIRECT_URL = '/security/profile-setup/'  # New user goes here
ACCOUNT_LOGIN_REDIRECT_URL = '/'       # Existing user goes here 
ACCOUNT_LOGOUT_REDIRECT_URL = '/security/login/'          # Logout here 


# Allow your frontend origin (important)
CORS_ALLOWED_ORIGINS = [
    "https://accounts.google.com",
    "http://localhost:1234",  # your frontend running port
    "http://127.0.0.1:1234",
]

# Or, to allow all origins (not recommended for production)
CORS_ALLOW_ALL_ORIGINS = True





REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),  # Short lifespan for security
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # User stays logged in for 7 days
    'ROTATE_REFRESH_TOKENS': True,  # New refresh token issued on every refresh
    'BLACKLIST_AFTER_ROTATION': True,  # Old refresh token becomes invalid
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}



AUTH_USER_MODEL = 'Security.CustomUser'

